F:\Learning Projects\mobile\kotlin\synrgy_bootcamp\MyCatCollections\app\src\main\res\drawable-v24: Warning: This folder configuration (v24) is unnecessary; minSdkVersion is 24. Merge all the resources in this folder into drawable. [ObsoleteSdkInt]

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

F:\Learning Projects\mobile\kotlin\synrgy_bootcamp\MyCatCollections\app\src\main\res\layout\activity_login.xml:8: Warning: Possible overdraw: Root element paints background @color/primary_orange with a theme that also paints a background (inferred theme is @style/Theme.MyCatCollections) [Overdraw]
    android:background="@color/primary_orange"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

F:\Learning Projects\mobile\kotlin\synrgy_bootcamp\MyCatCollections\app\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml:2: Warning: The resource R.mipmap.ic_launcher_round appears to be unused [UnusedResources]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^
F:\Learning Projects\mobile\kotlin\synrgy_bootcamp\MyCatCollections\app\src\main\res\values\strings.xml:4: Warning: The resource R.string.hello_blank_fragment appears to be unused [UnusedResources]
    <string name="hello_blank_fragment">Hello blank fragment</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~
F:\Learning Projects\mobile\kotlin\synrgy_bootcamp\MyCatCollections\app\src\main\res\values\strings.xml:22: Warning: The resource R.string.image_content_desc appears to be unused [UnusedResources]
    <string name="image_content_desc">TODO</string>
            ~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

F:\Learning Projects\mobile\kotlin\synrgy_bootcamp\MyCatCollections\app\src\main\res\mipmap-anydpi-v26\ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

0 errors, 6 warnings
